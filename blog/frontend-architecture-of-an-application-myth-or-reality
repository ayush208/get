<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Frontend Architecture: A New Way to Add Flexibility to a Web Product</title>
    <meta name="description" content="Consider a notion of frontend architecture in web development and find out about a better web app development approach with product scalability in mind.">
    <meta property="og:title" content="Frontend Architecture: A New Way to Add Flexibility to a Web Product">
    <meta property="og:description" content="Consider a notion of frontend architecture in web development and find out about a better web app development approach with product scalability in mind.">
    <meta property="og:image" content="/assets/images/blog/post3/main.jpg">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-3HEJQJ9FV5"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', "G-3HEJQJ9FV5");
    </script>
    <script>
      !function(f,b,e,v,n,t,s)
      {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
      n.callMethod.apply(n,arguments):n.queue.push(arguments)};
      if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
      n.queue=[];t=b.createElement(e);t.async=!0;
      t.src=v;s=b.getElementsByTagName(e)[0];
      s.parentNode.insertBefore(t,s)}(window, document,'script',
      'https://connect.facebook.net/en_US/fbevents.js');
      fbq('init', 4086291611434503);
      fbq('track', 'PageView');
    </script>
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="icon" type="image/png" href="/assets/images/favdark.png">
    <link rel="stylesheet" href="/css/main.css">
    <link rel="preload" as="style" href="/css/main.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/monokai.min.css">
  </head>
  <body>
    <div class="nav-container" id="header">
      <div class="container-xl">
        <div class="col-12 col-xl-12 offset-xl-0 col-lg-10 offset-lg-1">
          <nav><a class="logo" href="/"><img src="/assets/icons/logo.svg" width="34" height="40" alt="logo"></a>
            <div class="nav-navigation">
              <ul class="menu-toggle">
                <li class="non-hidden">
                  <button class="btn menu" onclick="toggleMenu()">
                    <div class="burger-menu close" id="burger-menu">
                      <div class="bar"></div>
                      <div class="bar"></div>
                      <div class="bar"></div>
                    </div>
                  </button>
                </li>
              </ul>
              <ul class="menu-wrapper" id="mobile-menu">
                <li class="non-hidden logo">
                  <div class="logo"><a class="logo" href="/"><img src="/assets/icons/logo.svg" alt="logo"></a></div>
                </li>
                <li><a class="item-menu__link" href="/projects" title="Projects">Projects</a></li>
                <li><a class="item-menu__link" href="/services" title="Services">Services</a></li>
                <li><a class="item-menu__link" href="/team" title="Team">Team</a></li>
                <li><a class="item-menu__link" href="/careers" title="Careers">Careers</a></li>
                <li><a class="item-menu__link" href="/blog" title="Blog">Blog</a></li>
                <li><a class="non-mobile btn magnet backlight-button non-border cta" id="headerCta" target="_blank" href="https://uinno.io/web-summit/">Web Summit</a><a class="only-mobile btn magnet backlight-button non-border cta" id="headerCta" target="_blank" href="https://uinno.io/web-summit/">Web Summit</a></li>
              </ul>
            </div>
          </nav>
        </div>
      </div>
    </div>
    <div class="blog-page blog-frontent-architect blog-page-inner">
      <div class="floated-block js-floated-block">
        <div class="floated-block-container">
          <div class="floated-block-header">
            <div class="floated-block-title">Need to fill the gap in your tech team?</div>
            <button class="floated-block-toggler js-floated-block-toggle"><img class="floated-block-toggler-arrow" src="/assets/icons/arrow_up.svg" alt="arrow_up"/></button>
          </div>
          <div class="floated-block-content js-floated-block-content">
            <div class="floated-block-text">
              <p>Rapidly become your extended team or build a product from scratch. Top-notch engineering solutions by Uinno.</p>
            </div>
            <div class="floated-block-actions">
              <button class="floated-block-btn" onclick="scrollPageTo('footer', 0); gtag('event', 'button-side-click')">let’s talk business</button><a class="floated-block-btn" href="/services" onclick="gtag('event', 'button2-side-click')">learn more</a>
            </div>
          </div>
        </div>
      </div>
      <div class="container-xl blog-page-heading">
        <div class="row opacity-0">
          <div class="col-12 col-xl-12 offset-xl-0 col-lg-10 offset-lg-1">
            <div class="blog-preview">
              <div class="blog-preview-content">
                <div class="blog-preview-category">Insights</div>
                <h3 class="blog-preview-title">Frontend architecture of an application - myth or reality</h3>
                <div class="blog-preview-author">
                  <div class="blog-preview-author-image"><img src="/assets/images/blog/authors/dmitry-braginets.jpg" alt="Dmitry Braginets"></div>
                  <div class="blog-preview-author-info">
                    <div class="blog-preview-author-title">Development Team Lead</div>
                    <ul class="blog-preview-author-list">
                      <li>Dmitry Braginets</li>
                      <li>15 min read</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="jarallax-holder jarallax"><img class="jarallax-img" src="/assets/images/blog/post3/main.jpg" alt="main"></div>
      <div class="container-xl blog-container">
        <div class="row">
          <div class="col-12 col-xl-12 offset-xl-0 col-lg-10 offset-lg-1">
            <div class="main-subtitle">table of</div>
            <h2 class="main-title">content</h2>
            <div class="row">
              <div class="col-12 col-lg-10 offset-lg-1">
                <ul class="content-legend">
                  <li><a href="#core-challange">The core challenge</a></li>
                  <li><a href="#what-frontend-archit">What is frontend architecture?</a></li>
                  <li><a href="#example-frontend-architect">A simple example of a frontend architecture</a></li>
                  <li><a href="#better-scenario">A better scenario</a></li>
                  <li><a href="#get-data-about-web">Getting data about the web app</a></li>
                  <li><a href="#next-step">The next step</a></li>
                  <li><a href="#new-requirement">Suddenly, a new requirement</a></li>
                  <li><a href="#conclusions">Conclusions</a></li>
                </ul>
                <div class="content">
                  <p>You may have never thought about the possible architectural issues in software development, but they do exist. Probably, frontend engineers still have a bias towards technological solutions, but not the architectural ones.</p>
                  <p>What is at stake?</p>
                  <p>For instance, over the Internet, be it posts in social media like Twitter or articles on content platforms like Medium, there are mostly discussions about new libraries, frameworks, and custom software solutions.</p>
                  <p>However, you can almost never find a debate about architectural issues. It seems that these discussions are a direct reflection of the code that app developers write. There are so many product development projects with really cool and sophisticated custom software solutions. But these web projects had to be expanded or modified not because of the existing architecture, but in spite of it.</p>
                  <div class="image-container"><img class="image-rounded-full" src="/assets/images/blog/post3/technological-solutions.png"></div>
                  <div class="content-container" id="core-challange">
                    <h3>The сore сhallenge</h3>
                    <p>As it happens, for a long period of time the frontend part of the product development has been treated absolutely frivolously. At the same time, frontend developers were considered far from programming. While honored and experienced backend developers were creating patterns and solving architectural problems, frontend specialists riveted jQuery-flavored forms. That seems to be the main problem.</p>
                    <p>But times change. After Google released Gmail, which, in fact, is the prototype of web applications, everyone in the business sphere has begun to wish for the same technology solutions. That was the beginning. Angular, React, Vue - those are just the most popular technologies among web developers. The complexity of web applications grew year by year. Guess, who had to bring all this to life?</p>
                    <p>That's right - yesterday's undervalued frontend specialists or so-called webmasters. Those who had a distant understanding of an "architecture" word. Those who rather associated it with ancient Greek temples.</p>
                    <p> The future frontend engineers followed the path that respected backend developers had trodden back, probably, in the 80s and 90s of the last century. Loads of mistakes have been made so far and there are so many more of them in the future.<br>The second, but no less important part is that currently, frontend development has become a "gateway" to the IT world. The demand for Javascript developers is simply daunting. It greatly helps everyone to open the door to the alluring world of smoothies, MacBooks, and gyro scooters right from their feet.</p>
                    <div class="image-container"><img class="image-rounded" src="/assets/images/blog/post3/banner-wanna-smoothie.png"></div>
                    <p>This is neither good nor bad. These are the realities of the current technology market. The bad news is that it is difficult to educate such a large number of people. For some software development companies educating staff is not profitable at all. The main point for them is to witness how the oars rhythmically plunge into the abyss...</p>
                    <p>As a result, we get millions of code lines that work somehow or other, but groans heart-rendingly under the weight of technical debt. And these approaches migrate from one web project to another one.</p>
                  </div>
                  <div class="content-container" id="what-frontend-archit">
                    <h3>What is frontend architecture?</h3>
                    <p>Surely, it is easier to cite the architecture definition from some books written by respected authors or from Wikipedia. But in order to simplify the understanding, here is a short wording of what architecture stands for.</p>
                    <div class="message-container">
                      <div class="message-inner">Architecture is how the parts, components, or modules of a program interact with each other.</div>
                    </div>
                    <p>For example, you have a very real single-page web application. What does "real" mean here? The fact that it is all written in one single file of 25-35 thousand code lines with many global variables that are mutated from a thousand places. Well, it turns out to be architecture. Even though it's more like a huge stone block.</p>
                    <div class="read-also-info">
                      <div class="read-also-info-inner"><img class="info-icon" src="/assets/icons/read-also-icon.png" alt="icon">
                        <p class="text">Read also: &nbsp;<a class="link" href="/blog/how-to-create-an-mvp-that-is-easy-to-maintain-and-scale">The right solution architecture for MVP development</a></p><img class="arrow-icon" src="/assets/icons/arrow_right.svg" alt="icon">
                      </div>
                    </div>
                  </div>
                  <div class="content-container" id="example-frontend-architect">
                    <h3>A simple example of a frontend architecture</h3>
                    <p>Let's consider the examples that are mostly far-fetched. The idea is to simplify the understanding and somehow fit all this into a couple of code snippets. Because if you take examples from real web projects, the article may be too long and too detailed.</p>
                    <p>Below you will see a simple example of a task list widget (just another to-do list app). You can find it in similar interpretations on the Internet. To concentrate on architecture and avoid the details of implementation, the code sample consists of pseudocode.</p>
                    <p>For clearance, all code examples in the article were developed using React framework. However, this approach is easily portable to Vue, especially using the composition API.</p>
                    <pre class="code-highlight"><code>const TodoListComponent = ({ todoListId }) => {
  const [todoList, setTodoList] = useState([]);s
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);

  const todoCreateHandler = useCallback((todo) => {
    axios
      .post("/todo", {
        // post body
      })
      .then()
      .catch();
  },[]);

  // handle API call to update todo by id
  const todoItemCheckHandler = useCallback(/** ... */);

  useEffect(() => {
    if (!isModal) {
      axios.get(`/todo-list/${todoListId}`).then((res) => {
        const data = lodash.get(res, "data");
        setTodoList(data);
      });
    }
  }, [todoListId]);

  return (
    &lt;div&gt;
      &lt;h2&gt;{todoList.title}&lt;/h2&gt;
      &lt;ul&gt;
        {todoList.todos.map(() =&gt; {
          /**
            * Here we implement the TodoItemComponent functionality
            * and handle todoItem check/uncheck
          */
        })}
        &lt;TodoItemCreateComponent onCreate={todoCreateHandler} /&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  );
};</code></pre>
                    <p>As you can see, the tutorial is similar to the ones you already found in Medium, dev.to, etc. We receive data using axios in a direct component. Then lodash allows us to get data from the API response body. Now, we can save it to a local state and map it to JSX.</p>
                    <p>As a result, it all will work. Then what is the issue, you ask? The thing is that we have nailed all possible dependencies to the component. The component knows how, with what, and where we get the data from. We conduct manipulations with it and then directly map the structure obtained from the backend into our component. We also need to immediately handle the loading, fetched, or error states.</p>
                    <p>Let's just imagine a basic case. Backend developers have changed the structure of the response and we need to modify the component. If they changed the field names, then the JSX or Template has to be changed as well. If we decide to use redux, vuex, or any other state-manager, then again we will have to rewrite the component. Let's see what the options are in this case step-by-step.</p>
                  </div>
                  <div class="content-container" id="better-scenario">
                    <h3>A better scenario</h3>
                    <p>To improve the solution, we have to do the following:</p>
                    <ul class="list-with-icon">
                      <li class="list-with-icon__item"><img class="list-with-icon__icon" src="/assets/icons/done.svg" alt=""/>Create an APIClient that will use axios as a transportation method;</li>
                      <li class="list-with-icon__item"><img class="list-with-icon__icon" src="/assets/icons/done.svg" alt=""/>Impose utilities into a separate module.</li>
                    </ul>
                    <pre class="code-highlight"><code>const TodoListComponent = ({todoListId}) => {
  const [todoList, setTodoList] = useState([]);
  const todoCreateHandler = useCallback((todo) => {
    apiClient.createTodo(todoListId, todo).then().catch()
  },[])

  // handle API call to update todo by id
  const todoItemCheckHandler = useCallback(/** ... */);

  useEffect(() => {
    // Here we "hide" the axios and lodash into the separate modules
    apiClient.getTodoList(todoListId)
      .then(setTodoList);
  }, [todoListId]);

  return (
     &lt;div&gt;
       &lt;h2&gt;{todoList.title}&lt;/h2&gt;
       &lt;ul&gt;
         {todoList.todos.map(() =&gt;{
           /**
           * Here we implement the TodoItemComponent functionality
           * and handle todoItem check/uncheck
           */
         })}
         &lt;TodoItemCreateComponent onCreate={todoCreateHandler}/&gt;
       &lt;/ul&gt;
     &lt;/div&gt;
  );
};</code></pre>
                    <p>Now our component does not know that we are using axios and lodash. Also, it doesn't know that we are aiming at the specific endpoint. But we still directly utilize the data from the backend in the display.</p>
                  </div>
                  <div class="content-container" id="get-data-about-web">
                    <h3>Getting data about the web app</h3>
                    <p>Here's what more we can do:</p>
                    <ul class="list-with-icon">
                      <li class="list-with-icon__item"><img class="list-with-icon__icon" src="/assets/icons/done.svg" alt=""/>Use something similar to the Repository pattern to encapsulate getting data about the TodoList. For instance, let's name it TodoListHttpRepository;</li>
                      <li class="list-with-icon__item"><img class="list-with-icon__icon" src="/assets/icons/done.svg" alt=""/>If we use React or Vue3, then we can make a reusable module with the hooks or composition API.
 This module will leverage TodoListHttpRepository to receive data that can help to create an object or a class instance.
 The last one will follow the contract.</li>
                    </ul>
                    <pre class="code-highlight"><code>class TodoList {
  constructor(todoList) {
    this.title = todoList.listTitle;
    this.todos = todoList.listTodos;
  }
}

class TodoListHttpRepository {
  // Here we will pass the axios based api client
  constructor(transport) {
    this.transport = transport;
  }

  async getById(id) {
    const res = this.transport.get(`/todo-list/${id}`);

    return new TodoList(res);
  }

  async create(todoList) {
    /** */
  }

  async updateById(id, todoList) {
    /** */
  }

  async delete(id) {
    /** */
  }
}

const todoListRepo = new TodoListRepository(apiClient);

const useTodoList = (todoListId) => {
  const [todoList, setTodoList] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    setLoading(true);
    todoListRepo
      .getById(todoListId)
      .then(setTodoList)
      .catch(setError)
      .finally(() => setLoading(false));
  }, [todoListId]);

  return { data: todoList, error, loading };
};

const TodoListComponent = ({ todoListId }) => {
  const { data, loading, error } = useTodoList(todoListId);
  const todoItemCheckHandler = useTodoUpdate(todoListId);
  const todoCreateHandler = useTodoCreate(todoListId);

  return (
    &lt;div&gt;
      &lt;h2&gt;{data.title}&lt;/h2&gt;
      &lt;ul&gt;
        {data.todos.map(() =&gt; {
          /**
            * Here we implement the TodoItemComponent functionality
            * and handle todoItem check/uncheck
            */
        })}
        &lt;TodoItemCreateComponent onCreate={todoCreateHandler} /&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  );
};</code></pre>
                    <p>Now our component does not directly depend on what kind of response the API will send us. Here you may even notice the last letter of the SOLID acronym - Dependency Inversion.</p>
                    <p>Also, our component has little or no knowledge of where it receives data from. In fact, there is a huge value in a component that doesn't care where this data comes from - localstorage, http, state-manager, etc.</p>
                    <p>You may even notice that useTodoList seems to be very similar to react-query (swr, etc.) template, however, that's a topic for a separate article.</p>
                  </div>
                  <div class="content-container" id="next-step">
                    <h3>The next step</h3>
                    <p>Now let's physically (at the module level) separate the view (JSX, Template, etc.) from the logic.</p>
                    <pre class="code-highlight"><code>const useTodoListComponentState = ({ todoListId }) => {
  const { data, loading, error } = useTodoList(todoListId);
  const updateHandler = useTodoUpdate(todoListId);
  const createHandler = useTodoCreate(todoListId);

  return { data, loading, error, createHandler, updateHandler };
};

const TodoListComponent = ({ todoListId }) => {
  const { data, loading, error, createHandler, updateHandler } =
    useTodoListComponentState(todoListId);

  return (
    &lt;div&gt;
      &lt;h2&gt;{data.title}&lt;/h2&gt;
      &lt;ul&gt;
        {data.todos.map(() =&gt; {
          /**
            * Here we implement the TodoItemComponent functionality
            * and handle todoItem check/uncheck
            */
        })}
        &lt;TodoItemCreateComponent onCreate={todoCreateHandler} /&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  );
};</code></pre>
                    <p>What for, you ask? The answer will be revealed a little bit later.</p>
                  </div>
                  <div class="content-container" id="new-requirement">
                    <h3>Suddenly, a new requirement</h3>
                    <p>So what does that bring us?</p>
                    <p>You probably think that now instead of a single file, it is necessary to write a new module for each and every need. Then upgrade it with abstractions. Indeed, to receive an architecture that is open to extensions and resistant to change, we have to split our code and rely on contracts between layers. It doesn't matter if it involves a backend or a frontend development.</p>
                    <p>Now comes the fun part. Imagine a so-often situation when a client comes to a web developer and says: "The app is awesome. It looks amazing. There's just one thing - yesterday I had a brilliant idea while I was taking a bath with champagne...". Well, you get the idea of what comes next.</p>
                    <div class="image-container"><img class="image-rounded" src="/assets/images/blog/post3/new-requirement.png"></div>
                    <p>"To make a UX design even better, you need to let the user create a TodoList that already includes tasks. What's more important is that it all needs to be performed in a modal dialog box”. Well, we all love modal dialog boxes, don't we?...</p>
                    <p>“When a user clicks a button, a modal dialog box appears. There is an ability to enter the list name and fill in the tasks. A user can add, change or delete tasks whenever there's a need. All modifications can be saved in the database once the user clicks the Create button”. Wait for it...</p>
                    <p>"I mean, everything is already working perfectly. Just two minutes and this whole functionality gets integrated into a modal dialog box". How much code do you think we would have to rewrite in case of refactoring? Probably, our component would look like a set of several conditional statements and some kind of selection logic. You will need a local state or a certain state-manager to store the intermediate data state until the user clicks the button.</p>
                    <p>If you combine all this in one component, it will turn out not as beautiful and simple as it was at the very beginning. Any change of the existing code increases the chance that something will fall off or may be broken. Moreover, our TodoList is not covered with tests. However, this is a totally different story.</p>
                    <pre class="code-highlight"><code>const TodoListComponent = ({ todoListId, isModal }) => {
  const [todoList, setTodoList] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);

  const todoCreateHandler = useCallback((todo) => {
    axios
      .post("/todo", {
        // post body
      })
      .then()
      .catch();
  });

  // handle API call to update todo by id
  const todoItemCheckHandler = useCallback(/** ... */);

  const todoListRedux = useSelector((state) => selectTodoListById(todoListId));
  const dispatch = useDispatch();

  useEffect(() => {
    if (!isModal) {
      axios.get(`/todo-list/${todoListId}`).then((res) => {
        const data = lodash.get(res, "data");
        setTodoList(data);
      });
    }
  }, [todoListId]);

  const data = isModal ? todoListRedux : todoList;
  const createHandler = isModal
    ? todoCreateHandler
    : (todo) => dispatch(createTodoAction(todo));
  // Here could be the other conditions

  return (
    &lt;div&gt;
      &lt;h2&gt;{data.title}&lt;/h2&gt;
      &lt;ul&gt;
        {data.todos.map(() =&gt; {
          /**
            * Here we implement the TodoItemComponent functionality
            * and handle todoItem check/uncheck
            */
        })}
        &lt;TodoItemCreateComponent onCreate={createHandler} /&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  );
};</code></pre>
                    <p>After refactoring, we clearly u nderstand that there is nothing to modify. All we have to do is add.</p>
                    <p>We can create a separate module that will handle the state of our TodoList but stay in the modal box. Now we just need to select the required module depending on where our component is located. The old code did not change. The new one was added easily and simply since you only need to comply with the contract between the layers.</p>
                    <pre class="code-highlight"><code>const hooks = {
  "todo-list-page": useTodoListComponentState,
};

const useHook = ({ context, ...rest }) => {
  return hooks[context](rest);
};

const TodoListComponent = ({ todoListId, context }) => {
  const { data, loading, error, createHandler, updateHandler } = useHook({
    todoListId,
    context,
  });

  return (
    &lt;div&gt;
      &lt;h2&gt;{data.title}&lt;/h2&gt;
      &lt;ul&gt;
        {data.todos.map(() =&gt; {
          /**
            * Here we implement the TodoItemComponent functionality
            * and handle todoItem check/uncheck
            */
        })}
        &lt;TodoItemCreateComponent onCreate={todoCreateHandler} /&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  );
};

const hooks = {
  "todo-list-page": useTodoListComponentState,
  "create-todo-list-modal": useTodoListCreateModalState,
};

const useHook = ({ context, ...rest }) => {
  return hooks[context](rest);
};

const TodoListComponent = ({ todoListId, context }) => {
  const { data, loading, error, createHandler, updateHandler } = useHook({
    todoListId,
    context,
  });

  return (
    &lt;div&gt;
      &lt;h2&gt;{data.title}&lt;/h2&gt;
      &lt;ul&gt;
        {data.todos.map(() =&gt; {
          /**
            * Here we implement the TodoItemComponent functionality
            * and handle todoItem check/uncheck
            */
        })}
        &lt;TodoItemCreateComponent onCreate={todoCreateHandler} /&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  );
};</code></pre>
                    <p>That's exactly why we separated the display from the logic. The same mapping can have multiple data sources and multiple execution contexts. In no way, it is an invention of a fevered mind. We have developed a web product where the same widget was used in four different places while having two different data sources. And this is just the tip of the iceberg.</p>
                  </div>
                  <div class="content-container" id="conclusions">
                    <h3>Conclusions</h3>
                    <p>This approach to frontend architecture is not an invention nor a silver bullet. Not by a long shot. It just uncovers the importance of good frontend architecture. The one that will help web app developers to add new features to applications or change the old ones per the client’s request.</p>
                    <p>It leads to less time-to-market time, which, in turn, reduces app development costs and makes customers much happier.</p>
                    <p>Someone might say that in order to get away from contexts, you can use HOC (aka Container Components). And that is completely correct. Somebody may suggest a bunch of other solutions and the truth will be on their side too.</p>
                    <p>Let us emphasize that the described approach is not for a copy-paste attitude. You can not just replicate it in your web project. Instead, you can think about its importance and avoid certain patterns that may ruin all your aspirations for the future of your web product growth.</p>
                    <p>Require a consultation on the frontend architecture of a web app?&nbsp;<a href="#footer">Get in touch!</a></p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="follow"></div>
    <div id="notification-container"></div>
    <div class="footer-section opacity-0" id="footer">
      <div class="container-xl">
        <div class="row">
          <div class="col-12 col-xl-12 offset-xl-0 col-lg-10 offset-lg-1">
            <div class="main-subtitle">schedule a call</div>
            <h1 class="main-title">let's talk business</h1>
            <div class="footer-block">
              <div class="row">
                <div class="col-12 col-md-6 col-lg-5">
                  <div class="footer-form-block">
                    <form id="footer-form">
                      <p class="text-primary">drop us a line</p>
                      <div class="row">
                        <div class="col-12 col-sm-6">
                          <div class="form-control-wrapper">
                            <input class="toValidate form-input" name="name" type="text" placeholder="name" data-validator-rules="required"><span class="error"></span>
                          </div>
                        </div>
                        <div class="col-12 col-sm-6">
                          <div class="form-control-wrapper">
                            <input class="toValidate form-input" name="email" type="email" placeholder="email" data-validator-rules="required|email"><span class="error"></span>
                          </div>
                        </div>
                        <div class="col-12">
                          <div class="form-control-wrapper">
                            <input class="toValidate form-input" name="phone" type="tel" placeholder="phone (optional)" data-validator-rules="phone"><span class="error"></span>
                          </div>
                        </div>
                        <div class="col-12">
                          <div class="form-control-wrapper">
                            <input class="toValidate form-input" name="topic" type="text" placeholder="Subject (optional)"><span class="error"></span>
                          </div>
                        </div>
                        <div class="col-12">
                          <div class="form-control-wrapper">
                            <label class="input-right" data-input-name="file" for="file">
                              <input class="d-none input-file" id="file" type="file" name="file" data-validator-rules="fileSize|fileType" data-file-max-size="10" accept=".zip, .doc, .docx, .pdf"><img class="icon-field icon-clip footer-form__icon-clip" src="/assets/icons/clip.svg" alt="clip">
                            </label>
                            <input class="toValidate with-icon form-input" name="text" type="text" placeholder="project details (optional)"><span class="file-target data-file-target" id="fileWriteTargetFooter">&nbsp;</span><img class="icon-field icon-cancel field-file-cancel" src="/assets/icons/close.svg" alt="delete"><span class="error footer-form-file-choose-error"></span>
                          </div>
                        </div>
                        <div class="col-12 footer-btn-wrapper">
                          <button class="btn magnet cta-form-button backlight-button non-border" id="submitButton" type="button">send a message</button>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
                <div class="col-12 col-md-5 offset-md-1 col-lg-5 offset-lg-2">
                  <div class="footer-contact-info">
                    <div class="contacts item">
                      <p class="text-primary">contact us</p><span class="contact-info"><a href="mailto:contact@uinno.io">contact@uinno.io</a></span><span class="contact-info"><a href="tel:+372 602 7299">+372 602 7299</a></span>
                    </div>
                    <div class="visit-us item">
                      <p class="text-primary">visit us</p>
                      <div class="footer-contact-info__address">
                        <div class="footer-contact-info-country"><b>Estonia</b>
                          <p>Tallinn, Tuukri 19</p>
                        </div>
                        <div class="footer-contact-info-country"><b>Ukraine</b>
                          <p>Zaporizhzhia, Sobornyi 160</p>
                        </div>
                      </div>
                    </div>
                    <div class="follow-links item">
                      <p class="text-primary">follow us</p>
                      <div class="companies-links"><a class="social-link" href="https://www.facebook.com/uinno.io" target="_blank"><img src="/assets/icons/social/facebook.svg" alt="company"></a><a class="social-link" href="https://www.linkedin.com/company/uinno/" target="_blank"><img src="/assets/icons/social/linkedin.svg" alt="company"></a><a class="social-link" href="https://www.instagram.com/uinno.io/" target="_blank"><img src="/assets/icons/social/instagram.svg" alt="company"></a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="footer-privacy"><span class="footer-copy">&copy; 2021 All rights reserved</span>
              <div class="footer-links"><a class="footer-link" href="/privacy-policy">Privacy Policy</a><a class="footer-link" href="/terms-and-conditions">Terms &amp; Conditions</a></div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script src="//cdnjs.cloudflare.com/ajax/libs/validate.js/0.13.1/validate.min.js"></script>
    <script src="/js/lazysizes.min.js" async></script>
    <script src="/js/header.js"></script>
    <script src="/js/magnet-mouse.js"></script>
    <script src="/js/utils.js"></script>
    <script src="/js/animation.js"></script>
    <script src="/js/validate.js"></script>
    <script src="/js/notifications.js"></script>
    <script src="/js/app.js"></script>
    <script src="/js/jarallax.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/languages/javascript.min.js"></script>
    <script>
      setTimeout(() => {
        setActivePageSection('blog');
        initScrollCheck('.opacity-0', 'opacity-animation', false);
      }, 100);
      jarallax(document.querySelectorAll('.jarallax'), {
        speed: 0.2,
        imgPosition: 'top center',
      });
      
      hljs.highlightAll();
    </script>
    <noscript><img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=4086291611434503&amp;ev=PageView&amp;noscript=1"></noscript>
    <script>
      _linkedin_partner_id = "2969202";
      window._linkedin_data_partner_ids = window._linkedin_data_partner_ids || [];
      window._linkedin_data_partner_ids.push(_linkedin_partner_id);
    </script>
    <script>
      (function(){var s = document.getElementsByTagName("script")[0];
      var b = document.createElement("script");
      b.type = "text/javascript";b.async = true;
      b.src = "https://snap.licdn.com/li.lms-analytics/insight.min.js";
      s.parentNode.insertBefore(b, s);})();
    </script>
    <noscript><img height="1" width="1" style="display:none;" alt="" src="https://px.ads.linkedin.com/collect/?pid=2969202&amp;fmt=gif"></noscript>
    <script src="/js/trackers/leadfeeder-code.js"></script>
  </body>
</html>