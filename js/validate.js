class FormValidator{fields={};form;fieldsData={};callback;errorsMap={required:"Required field",email:"Invalid email, ex: abc@example.com",fileSize:"File size must be smaller than {{fileMaxSize}} MB",fileType:"We accept next file extensions - {{acceptedFileTypes}}",phone:"Invalid phone number. Should start from +"};validatorsMap={required:e=>Boolean(e.value),email:e=>/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(String(e.value).toLowerCase()),fileSize:e=>{if(e.value){return e.fieldRef.files[0].size/1024/1024<Number(e.fieldRef.dataset.fileMaxSize)}return!0},fileType:e=>{if(e.value){const t=e.value.toLowerCase(),i=t.lastIndexOf("."),a=t.slice(i);return e.fieldRef.getAttribute("accept").split(", ").includes(a)}return!0},phone:e=>/^\+\d+$/gi.test(String(e.value))||0===String(e.value).length};constructor(e,t,i){this.callback=i,this.form=document.getElementById(e),this.submitButton=document.getElementById(t),this.fields=this.initInputs([...this.form.elements]),this.fieldChange=this.fieldChange.bind(this),this.validate=this.validate.bind(this),Object.values(this.fields).forEach(e=>{"file"===e.getAttribute("type")?(e.parentNode.addEventListener("blur",this.fieldChange),e.parentNode.addEventListener("keyup",t=>{switch(t.key){case"Tab":break;case"Enter":e.click();break;default:this.fieldChange(t)}}),e.addEventListener("change",this.fieldChange),this.errorsMap.fileSize=this.errorsMap.fileSize.replace("{{fileMaxSize}}",e.dataset.fileMaxSize),this.errorsMap.fileType=this.errorsMap.fileType.replace("{{acceptedFileTypes}}",e.getAttribute("accept"))):(e.addEventListener("keyup",e=>{if(e&&e.target&&e.target.name){const t=this.fieldsData[e.target.name];this.clearErrors(t)}}),e.addEventListener("blur",this.fieldChange),e.addEventListener("change",this.fieldChange))}),this.submitButton.addEventListener("click",this.validate)}static getErrorRef(e){return e.closest(".form-control-wrapper").querySelector("span.error")}initInputs(e){const t={};return e.filter(e=>["INPUT","SELECT"].includes(e.tagName)).forEach(e=>{const i=e.getAttribute("data-validator-rules")||null;this.fieldsData[e.name]={name:e.name,value:e.value,validators:i?i.split("|"):null,error:[],touched:!1,firstBlur:!1,fieldRef:e,errorRef:FormValidator.getErrorRef(e)},t[e.name]=e}),t}validate(){Object.values(this.fieldsData).forEach(e=>{this.fieldsData[e.name].firstBlur=!0,this.fieldsData[e.name].touched=!0,this.checkField(e)});Object.values(this.fieldsData).every(e=>!e.error.length)&&this.getValues()}checkField(e){e.error=[],this.setTouched(e),this.clearErrors(e),e.validators&&e.validators.forEach(t=>{!this.validatorsMap[t](e)&&this.fieldsData[e.name].touched&&e.error.push(this.errorsMap[t])}),this.toggleErrors(e)}fieldChange(e){if("blur"===e.type&&"LABEL"!==e.target.tagName&&(this.fieldsData[e.target.name].firstBlur=!0),"LABEL"===e.target.tagName){let t=e.target.getAttribute("data-input-name");const i=this.fieldsData[t];this.checkField(i)}else{let t=e.target.name,i=e.target.value;const a=this.fieldsData[t];a.firstBlur=!0,a.value=i,this.checkField(a)}}getValues(){const e={};Object.values(this.fieldsData).forEach(t=>{const i=this.fields[t.name].getAttribute("type");e[t.name]="file"===i?this.fields[t.name].files[0]||null:t.fieldRef.value||null}),this.callback(e)}toggleErrors(e){if(e.error.length)return this.setClass(e.name,"invalid"),void(e.errorRef.innerText=e.error[0]);this.removeClass(e.name,"invalid"),e.error=[]}setTouched(e){this.fieldsData[e.name].firstBlur&&(e.touched=!0,this.setClass(e.name,"touched"))}setClass(e,t){const i=this.fields[e];"file"===i.getAttribute("type")?i.parentNode.classList.add(t):i.classList.add(t)}removeClass(e,t){const i=this.fields[e];"file"===i.getAttribute("type")?i.parentNode.classList.remove(t):i.classList.remove(t)}clearErrors(e){e.errorRef&&(e.errorRef.innerText="")}}